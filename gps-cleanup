# gps standardization routine
# 
# date: 15 October 2017
# originator: ian bruce
# description: standardizes trimble gps exports - adds fields to gps export, populates fields 
#              with data from gps fields, removes selected gps fields
# notes: add user input for field_gps (file location), loc_descr, loc_region, and company name
#

import os
import arcpy

field_gps = arcpy.GetParameter(0) # input gps file from user (path)
company_name = arcpy.GetParameter(3) # input company of data source from user
proj_descr = arcpy.GetParameter(1) # input name of project from user
proj_region = arcpy.GetParameter(2) # input location of project from user

desc_field_gps = arcpy.Describe(field_gps) # retrieves description object for gps file
sr_field_gps = desc_field_gps.spatialReference # retrieves spatial reference for gps file

trimble_fields = [] # empty list to populate with field names
for field in arcpy.ListFields(field_gps): # iterates through fields in gps file and adds field names to empty list
    trimble_fields.append(field.name) # command to add field name to end of list

# adds fields based upon whether file is shapefile or feature class (description object property)
if desc_field_gps.dataType != "FeatureClass":
    arcpy.AddField_management(field_gps, "loc_id", "TEXT", "", "", "40")
    arcpy.AddField_management(field_gps, "loc_type", "TEXT", "", "", "60")
    arcpy.AddField_management(field_gps, "loc_descr", "TEXT", "", "", "100")
    arcpy.AddField_management(field_gps, "x_coord", "DOUBLE", 16, 4)
    arcpy.AddField_management(field_gps, "y_coord", "DOUBLE", 16, 4)
    arcpy.AddField_management(field_gps, "lat_dd", "DOUBLE", 14, 8)
    arcpy.AddField_management(field_gps, "long_dd", "DOUBLE", 14, 8)
    arcpy.AddField_management(field_gps, "date_gps", "TEXT", "", "", "30")
    arcpy.AddField_management(field_gps, "gps_elev", "DOUBLE", 8, 2)
    arcpy.AddField_management(field_gps, "region", "TEXT", "", "", "40")
    arcpy.AddField_management(field_gps, "gps_prec", "FLOAT", 6, 3)
    arcpy.AddField_management(field_gps, "gps_acc", "FLOAT", 6, 3)
    arcpy.AddField_management(field_gps, "gps_file", "TEXT", "", "", "60")
    arcpy.AddField_management(field_gps, "status", "TEXT", "", "", "40")
    arcpy.AddField_management(field_gps, "source", "TEXT", "", "", "200")
    arcpy.AddField_management(field_gps, "notes", "TEXT", "", "", "200")
else:
    arcpy.AddField_management(field_gps, "loc_id", "TEXT", "", "", "40", "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(field_gps, "loc_type", "TEXT", "", "", "60" "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(field_gps, "loc_descr", "TEXT", "", "", "100", "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(field_gps, "x_coord", "DOUBLE", 16, 4, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(field_gps, "y_coord", "DOUBLE", 16, 4, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(field_gps, "latitude_dd", "DOUBLE", 14, 8, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(field_gps, "longitude_dd", "DOUBLE", 14, 8, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(field_gps, "date_gps", "TEXT", "", "", "30" "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(field_gps, "gps_elevation", "DOUBLE", 8, 2, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(field_gps, "region", "TEXT", "", "", "40", "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(field_gps, "gps_precision", "FLOAT", 6, 3, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(field_gps, "gps_accuracy", "FLOAT", 6, 3, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(field_gps, "gps_filename", "TEXT", "", "", "60" "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(field_gps, "status", "TEXT", "", "", "40", "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(field_gps, "source", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(field_gps, "notes", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED")

combined_gps_fields = [] # empty list to populate with complete set of field names
for field in arcpy.ListFields(field_gps):
    combined_gps_fields.append(field.name)

with arcpy.da.UpdateCursor(field_gps, combined_gps_fields) as update_cursor:   
    for row in update_cursor:
        if "Latitude" in combined_gps_fields or "Longitude" in combined_gps_fields:
            row[24] = row[2] # update loc_id with Comment field
            row[25] = row[10]  #u pdate loc_type with Feature Name field
            row[26] = proj_descr # update loc_descr with project descriptor
            row[29] = row[21] # update latitude_dd with Latitude field
            row[30] = row[22] # update longitude_dd with Longitude field
            row[31] = str(row[7]).split(" ")[0] + " " + row[8] # update gps_date with GPS Date and GPS Time
            row[32] = row[17] # update gps_elevation with GNSS Height field
            row[33] = proj_region # update region with unique location descriptor
            row[34] = row[19] # update gps_precision with Horizontal Precision field
            row[35] = row[3] # update gps_accuracy with PDOP field
            row[36] = row[11] # update gps_file with Datafile field
            row[37] = row[5] # update status with Correction Type field
            row[38] = row[6] + ", " + company_name # update source with Receiver Type field
            row[39] = row[2] # update notes with Comment field
        else:
            row[24] = row[2] # update loc_id with Comment field
            row[25] = row[10]  # update loc_type with Feature Name field
            row[26] = proj_descr # update loc_descr with project descriptor
            row[27] = row[22] # update x_coord with Eastings field
            row[28] = row[21] # update y_coord with Northings field
            row[31] = str(row[7]).split(" ")[0] + " " + row[8] # update gps_date with GPS Date and GPS Time
            row[32] = row[17] # update gps_elevation with GNSS Height field
            row[33] = proj_region # update region with unique location descriptor
            row[34] = row[19] # update gps_precision with Horizontal Precision field
            row[35] = row[3] # update gps_accuracy with PDOP field
            row[36] = row[11] # update gps_file with Datafile field
            row[37] = row[5] # update status with Correction Type field
            row[38] = row[6] + ", " + company_name # update source with Receiver Type field
            row[39] = row[2] # update notes with Comment field
        update_cursor.updateRow(row)

trimble_selection = range(2, 21) # list of numbers corresponding to fields selected for removal
drop_fields = [trimble_fields[i] for i in trimble_selection] # list of fields to delete
arcpy.DeleteField_management(field_gps, drop_fields) # command to delete fields

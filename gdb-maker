# 
# ArcPy Script - Standard Template Features
# 
# Description: Script will create a new geodatabase, with template feature classes.
# 
# Ian Bruce
# 12 February 2018
# Haley & Aldrich, Inc.
#

import arcpy
from arcpy import env

# formats user input string to standard format
def valid_proj_name(proj_name):
    if ' ' in proj_name or '-' in proj_name:
        proj_name = proj_name.replace('-','_')
        proj_name = proj_name.replace(' ','_')
        return proj_name
    else:
        return proj_name

proj_workspace = arcpy.GetParameter(0) # point to your desired folder location
name_gdb = valid_proj_name(arcpy.GetParameterAsText(1)) # name your geodatabase (project-specific)
sr = arcpy.GetParameter(2) # designate spatial reference
working_path = "{0}\{1}.gdb".format(proj_workspace, name_gdb) # concatenate name and path for full working geodatabase path

# SPATIAL REFERENCE NOTE:
#  NAD 1983, State Plane, California, Zone I, Feet: 2225
#  NAD 1983, State Plane, California, Zone II, Feet: 2226
#  NAD 1983, State Plane, California, Zone III, Feet: 2227
#  NAD 1983, State Plane, California, Zone IV, Feet: 2228
#  NAD 1983, State Plane, California, Zone V, Feet: 2229
#  NAD 1983, State Plane, California, Zone VI, Feet: 2230
#  NAD 1983, State Plane, Hawaii, Zone I, Feet: 102661
#  NAD 1983, State Plane, Hawaii, Zone II, Feet: 102662
#  NAD 1983, State Plane, Hawaii, Zone III, Feet: 102663
#  NAD 1983, State Plane, Hawaii, Zone IV, Feet: 102664
#  NAD 1983, State Plane, Hawaii, Zone V, Feet: 102665
#  NAD 1983, State Plane, Nevada, Central, Feet: 3422
#  NAD 1983, State Plane, Nevada, East, Feet: 3421
#  NAD 1983, State Plane, Nevada, West, Feet: 3423
#  NAD 1983, State Plane, Arizona, Central, Feet: 102649
#  NAD 1983, State Plane, Arizona, East, Feet: 102648
#  NAD 1983, State Plane, Arizona, West, Feet: 102650
#  WGS 1984, UTM, Zone 10N, Meters: 26910
#  WGS 1984, UTM, Zone 11N, Meters: 26911
#  WGS 1984, UTM, Zone 12N, Meters: 26912
#  WGS 1984, UTM, Zone 13N, Meters: 26913

arcpy.CreateFileGDB_management(proj_workspace, name_gdb) # create a file geodatabase

arcpy.CreateDomain_management(working_path, "Binary_Decision", "YES or NO field", "TEXT", "CODED", "DUPLICATE") # create a YES/NO domain
arcpy.CreateDomain_management(working_path, "Update", "Date of field updates", "DATE", "RANGE") # create a domain for date of modification
dictBinaryDecision = {"YES": "YES", "NO": "NO"} # data dictionary for coded values in domain
for coded_value in dictBinaryDecision: # assign coded values to existing domain
    arcpy.AddCodedValueToDomain_management(working_path, "Binary_Decision", coded_value, dictBinaryDecision[coded_value]) # sets valid values for YES/NO coded domain

env.workspace = working_path # sets the workspace (new geodatabase)

lines = valid_proj_name(arcpy.GetParameterAsText(3)) # assign name to line feature class
polys = valid_proj_name(arcpy.GetParameterAsText(4)) # assign name to polygons feature class
pts = valid_proj_name(arcpy.GetParameterAsText(5)) # assign name to points feature class
ddp_frames = valid_proj_name(arcpy.GetParameterAsText(6)) # assign name to data driven polygons feature class
ddp_pts = valid_proj_name(arcpy.GetParameterAsText(7)) # assign name to data driven points feature class

# populate empty geodatabase with feature classes
arcpy.CreateFeatureclass_management(working_path, lines, "POLYLINE", "", "DISABLED", "DISABLED", sr)
arcpy.CreateFeatureclass_management(working_path, polys, "POLYGON", "", "DISABLED", "DISABLED", sr)
arcpy.CreateFeatureclass_management(working_path, pts, "POINT", "", "DISABLED", "DISABLED", sr)
arcpy.CreateFeatureclass_management(working_path, ddp_frames, "POLYGON", "", "DISABLED", "DISABLED", sr)
arcpy.CreateFeatureclass_management(working_path, ddp_pts, "POINT", "", "DISABLED", "DISABLED", sr)

# populate line feature class with standard fields
arcpy.AddField_management("{0}\{1}".format(working_path, lines), "loc_id", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, lines), "coord_x_start", "DOUBLE", 14, 4, "", "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, lines), "coord_y_start", "DOUBLE", 14, 4, "", "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, lines), "coord_x_end", "DOUBLE", 14, 4, "", "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, lines), "coord_y_end", "DOUBLE", 14, 4, "", "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, lines), "loc_type", "TEXT", "", "", 60, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, lines), "loc_subtype", "TEXT", "", "", 60, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, lines), "loc_descr", "TEXT", "", "", 100, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, lines), "region", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, lines), "status", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, lines), "visible", "TEXT", "", "", 10, "", "NULLABLE", "NON_REQUIRED", "Binary_Decision")
arcpy.AddField_management("{0}\{1}".format(working_path, lines), "source", "TEXT", "", "", 240, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, lines), "last_updated", "DATE", "", "", "", "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, lines), "notes", "TEXT", "", "", 120, "", "NULLABLE", "NON_REQUIRED")
arcpy.EnableEditorTracking_management("{0}\{1}".format(working_path, lines), "", "", "", "last_updated", "NO_ADD_FIELDS", "DATABASE_TIME") # enable automatic updates for revision date
arcpy.AssignDomainToField_management("{0}\{1}".format(working_path, lines), "visible", "Binary_Decision") # assign YES/NO domain to visible field

# populate polygon feature class with standard fields
arcpy.AddField_management("{0}\{1}".format(working_path, polys), "loc_id", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, polys), "loc_type", "TEXT", "", "", 60, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, polys), "loc_subtype", "TEXT", "", "", 60, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, polys), "loc_descr", "TEXT", "", "", 100, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, polys), "region", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, polys), "status", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, polys), "visible", "TEXT", "", "", 10, "", "NULLABLE", "NON_REQUIRED", "Binary_Decision")
arcpy.AddField_management("{0}\{1}".format(working_path, polys), "source", "TEXT", "", "", 240, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, polys), "last_updated", "DATE", "", "", "", "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, polys), "notes", "TEXT", "", "", 120, "", "NULLABLE", "NON_REQUIRED")
arcpy.EnableEditorTracking_management("{0}\{1}".format(working_path, polys), "", "", "", "last_updated", "NO_ADD_FIELDS", "DATABASE_TIME") # enable automatic updates for revision date
arcpy.AssignDomainToField_management("{0}\{1}".format(working_path, polys), "visible", "Binary_Decision") # assign YES/NO domain to visible field

# populate points feature class with standard fields
arcpy.AddField_management("{0}\{1}".format(working_path, pts), "loc_id", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, pts), "coord_x", "DOUBLE", 14, 4, "", "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, pts), "coord_y", "DOUBLE", 14, 4, "", "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, pts), "latitude", "DOUBLE", 12, 8, "", "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, pts), "longitude", "DOUBLE", 12, 8, "", "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, pts), "loc_type", "TEXT", "", "", 60, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, pts), "loc_subtype", "TEXT", "", "", 60, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, pts), "loc_descr", "TEXT", "", "", 100, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, pts), "loc_value", "DOUBLE", 12, 3, "", "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, pts), "region", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, pts), "status", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, pts), "visible", "TEXT", "", "", 10, "", "NULLABLE", "NON_REQUIRED", "Binary_Decision")
arcpy.AddField_management("{0}\{1}".format(working_path, pts), "source", "TEXT", "", "", 240, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, pts), "last_updated", "DATE", "", "", "", "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, pts), "notes", "TEXT", "", "", 120, "", "NULLABLE", "NON_REQUIRED")
arcpy.EnableEditorTracking_management("{0}\{1}".format(working_path, pts), "", "", "", "last_updated", "NO_ADD_FIELDS", "DATABASE_TIME") # enable automatic updates for revision date 
arcpy.AssignDomainToField_management("{0}\{1}".format(working_path, pts), "visible", "Binary_Decision") # assign YES/NO domain to visible field

# populate data driven polygons feature class with standard fields
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_frames), "fig_number", "TEXT", "", "", 10, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_frames), "fig_title", "TEXT", "", "", 100, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_frames), "fig_region", "TEXT", "", "", 50, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_frames), "page_sequence", "SHORT", "", "", "", "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_frames), "page_rotation", "DOUBLE", 5, 1, "", "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_frames), "page_scale", "DOUBLE", 10, 1, "", "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_frames), "visible", "TEXT", "", "", 10, "", "NULLABLE", "NON_REQUIRED", "Binary_Decision")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_frames), "note_1", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_frames), "note_2", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_frames), "note_3", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_frames), "note_4", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_frames), "note_5", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_frames), "note_6", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_frames), "note_7", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_frames), "note_8", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
arcpy.AssignDomainToField_management("{0}\{1}".format(working_path, ddp_frames), "visible", "Binary_Decision") # assign YES/NO domain to visible field

# populate data driven points feature class with standard fields
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_pts), "fig_number", "TEXT", "", "", 10, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_pts), "fig_title", "TEXT", "", "", 100, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_pts), "fig_region", "TEXT", "", "", 50, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_pts), "page_sequence", "SHORT", "", "", "", "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_pts), "page_rotation", "DOUBLE", 5, 1, "", "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_pts), "page_scale", "DOUBLE", 10, 1, "", "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_pts), "visible", "TEXT", "", "", 10, "", "NULLABLE", "NON_REQUIRED", "Binary_Decision")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_pts), "note_1", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_pts), "note_2", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_pts), "note_3", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_pts), "note_4", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_pts), "note_5", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_pts), "note_6", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_pts), "note_7", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
arcpy.AddField_management("{0}\{1}".format(working_path, ddp_pts), "note_8", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
arcpy.AssignDomainToField_management("{0}\{1}".format(working_path, ddp_pts), "visible", "Binary_Decision") # assign YES/NO domain to visible field

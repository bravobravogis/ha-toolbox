# 
# ArcPy Script - Standard Template Features
# 
# Description: Script will create a new geodatabase, with template feature classes.
# 
# Ian Bruce
# 19 May 2019
# Bravo Bravo
#

import arcpy, string
from arcpy import env

# function that uses naming conventions to clean user input
def clean_name(name):
    
    name = str(name) # converts standard ASCII input from Unicode format
    name = name.strip() # removes leading and trailing spaces
    name = name.lower() # converts to lowercase
    
    swap = string.maketrans("-+&. ", "_____") # translation table (from, to)
    punc = string.punctuation # assigns punctuation character set to variable
    punc = punc.replace("-", "") # removes punctuation that will be replaced
    punc = punc.replace("+", "")
    punc = punc.replace("&", "")
    punc = punc.replace(".", "")
    punc = punc.replace("_", "")
    name = string.translate(name, swap, punc) # replaces characters based on translation table then deletes punctuation
    
    mod_name = str(name[0]) # assigns first character of input to empty string
    for i, elem in enumerate(name): # iterates through each element of input string
        if i > 0:
            if elem == name[i-1] and elem == '_': # checks previous element for underscore characters
                continue # skips repeating underscore characters
            else:
                mod_name += elem # builds input string sequentially

    return mod_name # outputs rebuilt (cleaned) user input

output_folder = arcpy.GetParameter(0) # point to your desired folder location
input_name_gdb = clean_name(arcpy.GetParameterAsText(1)) # name your geodatabase (project-specific)
gdb = "{0}.gdb".format(input_name_gdb) # concatenate gdb name with file extension for full geodatabase name
input_sr = arcpy.GetParameterAsText(2) # designate spatial reference
sr = arcpy.SpatialReference() # create an empty spatial reference object
sr.loadFromString(input_sr) # load empty spatial reference object with parameter string
workspace = "{0}\{1}.gdb".format(output_folder, input_name_gdb) # concatenate name and path for full working geodatabase path
arcpy.CreateFileGDB_management(output_folder, gdb) # create a file geodatabase
env.workspace = workspace # set the workspace (new geodatabase)

arcpy.CreateDomain_management(workspace, "YES_NO", "YES or NO", "TEXT", "CODED", "DUPLICATE") # create a YES/NO domain
arcpy.CreateDomain_management(workspace, "STATUS", "Status categories", "TEXT", "CODED", "DUPLICATE") # create a status domain
arcpy.CreateDomain_management(workspace, "SAMPLE_TYPE", "Sample types", "TEXT", "CODED", "DUPLICATE") # create a status domain
arcpy.CreateDomain_management(workspace, "UPDATED", "Last updated", "DATE", "RANGE") # create a domain for date of modification
dictYesNo = {"yes": "yes", "no": "no"} # data dictionary for coded values in domain
dictStatus = {"proposed": "proposed", "in progress": "in progress", "complete": "complete"} # data dictionary for coded values in domain
dictSampType = {"ss": "surface soil", "sub": "subsurface soil", "sw": "surface water", "gw": "groundwater", "confirmation": "confirmation soil", "sidewall": "confirmation sidewall soil", "ia": "indoor air", "aa": "ambient air"} # data dictionary for coded values in domain
for coded_value in dictYesNo: # assign coded values to existing domain
    arcpy.AddCodedValueToDomain_management(workspace, "YES_NO", coded_value, dictYesNo[coded_value]) # sets valid values for YES/NO coded domain
for coded_value in dictStatus: # assign coded values to existing domain
    arcpy.AddCodedValueToDomain_management(workspace, "STATUS", coded_value, dictStatus[coded_value]) # sets valid values for YES/NO coded domain
for coded_value in dictSampType: # assign coded values to existing domain
    arcpy.AddCodedValueToDomain_management(workspace, "SAMPLE_TYPE", coded_value, dictSampType[coded_value]) # sets valid values for YES/NO coded domain

input_name_lines = clean_name(arcpy.GetParameterAsText(3)) # assign name to line feature class
input_name_polys = clean_name(arcpy.GetParameterAsText(4)) # assign name to polygons feature class
input_name_pts = clean_name(arcpy.GetParameterAsText(5)) # assign name to points feature class
input_ddp_type = arcpy.GetParameterAsText(6) # selection for data driven pages feature type
input_name_ddp = clean_name(arcpy.GetParameterAsText(7)) # assign name to data driven pages feature class

# populate empty geodatabase with feature classes
arcpy.CreateFeatureclass_management(workspace, input_name_lines, "POLYLINE", "", "DISABLED", "DISABLED", sr)
arcpy.CreateFeatureclass_management(workspace, input_name_polys, "POLYGON", "", "DISABLED", "DISABLED", sr)
arcpy.CreateFeatureclass_management(workspace, input_name_pts, "POINT", "", "DISABLED", "DISABLED", sr)

# populate line feature class with standard fields
arcpy.AddField_management(input_name_lines, "visible", "TEXT", "", "", "5", "", "NULLABLE", "NON_REQUIRED", "YES_NO")
arcpy.AddField_management(input_name_lines, "loc_id", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_lines, "loc_type", "TEXT", "", "", "50", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_lines, "loc_subtype", "TEXT", "", "", "50", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_lines, "loc_descr", "TEXT", "", "", "100", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_lines, "loc_value", "FLOAT", "12", "3", "", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_lines, "loc_region", "TEXT", "", "", "50", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_lines, "loc_status", "TEXT", "", "", "50", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_lines, "coord_y_start", "DOUBLE", "14", "4", "", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_lines, "coord_x_start", "DOUBLE", "14", "4", "", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_lines, "coord_y_end", "DOUBLE", "14", "4", "", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_lines, "coord_x_end", "DOUBLE", "14", "4", "", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_lines, "source", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_lines, "revision", "TEXT", "", "", "20", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_lines, "notes", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_lines, "last_updated", "DATE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "UPDATED")
arcpy.EnableEditorTracking_management(input_name_lines, "", "", "", "last_updated", "NO_ADD_FIELDS", "DATABASE_TIME") # enable automatic updates for revision date
arcpy.AssignDomainToField_management(input_name_lines, "visible", "YES_NO") # assign YES/NO domain to visible field

# populate polygon feature class with standard fields
arcpy.AddField_management(input_name_polys, "visible", "TEXT", "", "", "5", "", "NULLABLE", "NON_REQUIRED", "YES_NO")
arcpy.AddField_management(input_name_polys, "loc_id", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_polys, "loc_type", "TEXT", "", "", "50", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_polys, "loc_subtype", "TEXT", "", "", "50", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_polys, "loc_descr", "TEXT", "", "", "100", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_polys, "loc_value", "FLOAT", "12", "3", "", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_polys, "loc_region", "TEXT", "", "", "50", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_polys, "loc_status", "TEXT", "", "", "50", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_polys, "coord_y_centroid", "DOUBLE", "14", "4", "", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_polys, "coord_x_centroid", "DOUBLE", "14", "4", "", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_polys, "source", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_polys, "revision", "TEXT", "", "", "20", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_polys, "notes", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_polys, "last_updated", "DATE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "UPDATED")
arcpy.EnableEditorTracking_management(input_name_polys, "", "", "", "last_updated", "NO_ADD_FIELDS", "DATABASE_TIME") # enable automatic updates for revision date
arcpy.AssignDomainToField_management(input_name_polys, "visible", "YES_NO") # assign YES/NO domain to visible field

# populate points feature class with standard fields
arcpy.AddField_management(input_name_pts, "visible", "TEXT", "", "", "5", "", "NULLABLE", "NON_REQUIRED", "YES_NO")
arcpy.AddField_management(input_name_pts, "loc_id", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_pts, "loc_type", "TEXT", "", "", "50", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_pts, "loc_subtype", "TEXT", "", "", "50", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_pts, "loc_descr", "TEXT", "", "", "100", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_pts, "loc_value", "FLOAT", "12", "3", "", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_pts, "loc_region", "TEXT", "", "", "50", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_pts, "loc_status", "TEXT", "", "", "50", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_pts, "coord_y", "DOUBLE", "14", "4", "", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_pts, "coord_x", "DOUBLE", "14", "4", "", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_pts, "latitude", "DOUBLE", "12", "8", "", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_pts, "longitude", "DOUBLE", "12", "8", "", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_pts, "source", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_pts, "revision", "TEXT", "", "", "20", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_pts, "notes", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")
arcpy.AddField_management(input_name_pts, "last_updated", "DATE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "UPDATED")
arcpy.EnableEditorTracking_management(input_name_pts, "", "", "", "last_updated", "NO_ADD_FIELDS", "DATABASE_TIME") # enable automatic updates for revision date 
arcpy.AssignDomainToField_management(input_name_pts, "visible", "YES_NO") # assign YES/NO domain to visible field

if input_ddp_type == 'Frames':
    # populate data driven polygons feature class with standard fields
    arcpy.CreateFeatureclass_management(workspace, input_name_ddp, "POLYGON", "", "DISABLED", "DISABLED", sr)
    arcpy.AddField_management(input_name_ddp, "fig_number", "TEXT", "", "", 10, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "fig_title", "TEXT", "", "", 100, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "fig_region", "TEXT", "", "", 50, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "page_sequence", "SHORT", "", "", "", "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "page_rotation", "DOUBLE", 5, 1, "", "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "page_scale", "DOUBLE", 10, 1, "", "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "visible", "TEXT", "", "", 10, "", "NULLABLE", "NON_REQUIRED", "YES_NO")
    arcpy.AddField_management(input_name_ddp, "note_1", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "note_2", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "note_3", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "note_4", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "note_5", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "note_6", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "note_7", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "note_8", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AssignDomainToField_management(input_name_ddp, "visible", "YES_NO") # assign YES/NO domain to visible field
elif input_ddp_type == 'Points':
    # populate data driven points feature class with standard fields
    arcpy.CreateFeatureclass_management(workspace, input_name_ddp, "POINT", "", "DISABLED", "DISABLED", sr)
    arcpy.AddField_management(input_name_ddp, "fig_number", "TEXT", "", "", 10, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "fig_title", "TEXT", "", "", 100, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "fig_region", "TEXT", "", "", 50, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "page_sequence", "SHORT", "", "", "", "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "page_rotation", "DOUBLE", 5, 1, "", "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "page_scale", "DOUBLE", 10, 1, "", "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "visible", "TEXT", "", "", 10, "", "NULLABLE", "NON_REQUIRED", "YES_NO")
    arcpy.AddField_management(input_name_ddp, "note_1", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "note_2", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "note_3", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "note_4", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "note_5", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "note_6", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "note_7", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AddField_management(input_name_ddp, "note_8", "TEXT", "", "", 250, "", "NULLABLE", "NON_REQUIRED")
    arcpy.AssignDomainToField_management(input_name_ddp, "visible", "YES_NO") # assign YES/NO domain to visible field
